/**
 * generated by Xtext 2.12.0
 */
package co.edu.uniandes.formatting2;

import Angularjs.Template;
import co.edu.uniandes.services.AngularJsDslGrammarAccess;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class AngularJsDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private AngularJsDslGrammarAccess _angularJsDslGrammarAccess;
  
  protected void _format(final /* AngularJSApp */Object angularJSApp, @Extension final IFormattableDocument document) {
    throw new Error("Unresolved compilation problems:"
      + "\nParametro cannot be resolved to a type."
      + "\ngetTemplates cannot be resolved"
      + "\ngetModules cannot be resolved"
      + "\ngetParametros cannot be resolved"
      + "\nformat cannot be resolved");
  }
  
  protected void _format(final Template template, @Extension final IFormattableDocument document) {
    throw new Error("Unresolved compilation problems:"
      + "\nSetenciaHTML cannot be resolved to a type."
      + "\nDirectiva cannot be resolved to a type."
      + "\nformat cannot be resolved"
      + "\nformat cannot be resolved");
  }
  
  public void format(final Object template, final IFormattableDocument document) {
    if (template instanceof XtextResource) {
      _format((XtextResource)template, document);
      return;
    } else if (template instanceof Template) {
      _format((Template)template, document);
      return;
    } else if (template instanceof EObject) {
      _format((EObject)template, document);
      return;
    } else if (template == null) {
      _format((Void)null, document);
      return;
    } else if (template != null) {
      _format(template, document);
      return;
    } else if (template != null) {
      _format(template, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(template, document).toString());
    }
  }
}
