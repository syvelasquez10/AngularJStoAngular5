/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.formatting2;

import angularjs.AppAngularJS;
import angularjs.Componente;
import angularjs.Modelo;
import angularjs.Modulo;
import angularjs.SentenciaHTML;
import angularjs.Service;
import angularjs.Template;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;
  
  protected void _format(final AppAngularJS appAngularJS, @Extension final IFormattableDocument document) {
    EList<Modulo> _modulos = appAngularJS.getModulos();
    for (final Modulo modulo : _modulos) {
      document.<Modulo>format(modulo);
    }
    EList<Template> _templates = appAngularJS.getTemplates();
    for (final Template template : _templates) {
      document.<Template>format(template);
    }
    EList<Service> _services = appAngularJS.getServices();
    for (final Service service : _services) {
      document.<Service>format(service);
    }
    EList<Modelo> _modelos = appAngularJS.getModelos();
    for (final Modelo modelo : _modelos) {
      document.<Modelo>format(modelo);
    }
    EList<Componente> _componentes = appAngularJS.getComponentes();
    for (final Componente componente : _componentes) {
      document.<Componente>format(componente);
    }
  }
  
  protected void _format(final Template template, @Extension final IFormattableDocument document) {
    EList<SentenciaHTML> _sentenciashtml = template.getSentenciashtml();
    for (final SentenciaHTML sentenciaHTML : _sentenciashtml) {
      document.<SentenciaHTML>format(sentenciaHTML);
    }
  }
  
  public void format(final Object appAngularJS, final IFormattableDocument document) {
    if (appAngularJS instanceof XtextResource) {
      _format((XtextResource)appAngularJS, document);
      return;
    } else if (appAngularJS instanceof AppAngularJS) {
      _format((AppAngularJS)appAngularJS, document);
      return;
    } else if (appAngularJS instanceof Template) {
      _format((Template)appAngularJS, document);
      return;
    } else if (appAngularJS instanceof EObject) {
      _format((EObject)appAngularJS, document);
      return;
    } else if (appAngularJS == null) {
      _format((Void)null, document);
      return;
    } else if (appAngularJS != null) {
      _format(appAngularJS, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(appAngularJS, document).toString());
    }
  }
}
