/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Componente_UseStrictKeyword_0_q;
	protected AbstractElementAlias match_Modulo_UseStrictKeyword_0_q;
	protected AbstractElementAlias match_SentenciaHTML___LessThanSignSolidusKeyword_7_0_EStringParserRuleCall_7_1_GreaterThanSignKeyword_7_2__q;
	protected AbstractElementAlias match_Service_UseStrictKeyword_0_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_Componente_UseStrictKeyword_0_q = new TokenAlias(false, true, grammarAccess.getComponenteAccess().getUseStrictKeyword_0());
		match_Modulo_UseStrictKeyword_0_q = new TokenAlias(false, true, grammarAccess.getModuloAccess().getUseStrictKeyword_0());
		match_SentenciaHTML___LessThanSignSolidusKeyword_7_0_EStringParserRuleCall_7_1_GreaterThanSignKeyword_7_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getSentenciaHTMLAccess().getLessThanSignSolidusKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getSentenciaHTMLAccess().getEStringParserRuleCall_7_1()), new TokenAlias(false, false, grammarAccess.getSentenciaHTMLAccess().getGreaterThanSignKeyword_7_2()));
		match_Service_UseStrictKeyword_0_q = new TokenAlias(false, true, grammarAccess.getServiceAccess().getUseStrictKeyword_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getEStringRule())
			return getEStringToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * EString returns ecore::EString:
	 * 	STRING | ID;
	 */
	protected String getEStringToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Componente_UseStrictKeyword_0_q.equals(syntax))
				emit_Componente_UseStrictKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Modulo_UseStrictKeyword_0_q.equals(syntax))
				emit_Modulo_UseStrictKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SentenciaHTML___LessThanSignSolidusKeyword_7_0_EStringParserRuleCall_7_1_GreaterThanSignKeyword_7_2__q.equals(syntax))
				emit_SentenciaHTML___LessThanSignSolidusKeyword_7_0_EStringParserRuleCall_7_1_GreaterThanSignKeyword_7_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Service_UseStrictKeyword_0_q.equals(syntax))
				emit_Service_UseStrictKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ''use strict';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'angular.module('' modulo=[Modulo|EString]
	 */
	protected void emit_Componente_UseStrictKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ''use strict';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'angular.module('' name=EString
	 */
	protected void emit_Modulo_UseStrictKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('</' EString '>')?
	 *
	 * This ambiguous syntax occurs at:
	 *     curlybraces+=CurlyBraces (ambiguity) (rule end)
	 *     directivas+=Directiva '>' (ambiguity) (rule end)
	 *     name=EString '>' (ambiguity) (rule end)
	 *     propiedades+=Propiedad '>' (ambiguity) (rule end)
	 *     sentenciashtml+=[SentenciaHTML|EString] (ambiguity) (rule end)
	 */
	protected void emit_SentenciaHTML___LessThanSignSolidusKeyword_7_0_EStringParserRuleCall_7_1_GreaterThanSignKeyword_7_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ''use strict';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'describe('' name=EString
	 */
	protected void emit_Service_UseStrictKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
